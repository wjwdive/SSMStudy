<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wjw.mybatis.mapper.DynamicSQLMapper">

<!--
    动态SQL,
    1.if,通过test属性中的表达式判断标签中的内容是否有效（是否会拼接到sql中）
    2.where标签 <where>
        a. 若where标签中有条件成立，会自动生成where关键字
        b. 会自动将where标签中内容前面多余的and删除，但是其中内容后面多余的and无法删除
        c. 若where标签中没有任何一个条件成立，则where没有任何功能
    3.trim标签
        prefix, suffix: 在标签内容前面或后面添加指定内容
        prefixOverrides, suffixOverrides: 在标签中内容前面或后面添加或去掉指定内容
    4.choose, when, otherwise
        相当于java中的 if...else if...else
        when至少设置一个，otherwise最多设置一个
    5.foreach 标签
        collection:设置要循环的数组或集合
        item: 用一个字符串表示数组或集合中的每一个数据
        separator: 设置每次循环数据之间的分隔符
        open: 循环内容以什么开始
        close: 循环内容以什么结束
    6. sql标签
        可以记录一段SQL，在要使用的地方用include标签
-->
    <sql id="empColumns">
        emp_id, emp_name, age, gender, dept_id
    </sql>

<!--    List<Emp> getEmpByCondition(Emp emp);-->
    <select id="getEmpByConditionOne" resultType="Emp">
        select <include refid="empColumns"></include> from t_emp where 1=1
        <if test="empName != null and empName != ''">
            emp_name = #{empName}
        </if>
        <if test="age != null and age != ''">
            and age = #{age}
        </if>
        <if test="gender != null and gender != ''">
            and gender = #{gender}
        </if>
    </select>

<!--    使用where 标签，
1，可以自动生成where关键字，
2，可以把 标签中多余的and 关键字自动删除
3.若where标签中没有任何一个条件成立，则where没有任何功能
-->
    <select id="getEmpByConditionTwo" resultType="Emp">
        select * from t_emp
        <where>
            <if test="empName != null and empName != ''">
                emp_name = #{empName}
            </if>
            <if test="age != null and age != ''">
                and age = #{age}
            </if>
            <if test="gender != null and gender != ''">
                and gender = #{gender}
            </if>
        </where>

    </select>

<!--    trim 标签-->
    <select id="getEmpByCondition" resultType="Emp">
        select * from t_emp
        <trim prefix="where" suffixOverrides="and">
            <if test="empName != null and empName != ''">
                emp_name = #{empName}and
            </if>
            <if test="age != null and age != ''">
                age = #{age} and
            </if>
            <if test="gender != null and gender != ''">
                gender = #{gender}
            </if>
        </trim>
    </select>

<!--    List<Emp> getEmpByChoose(Emp emp);-->
    <select id="getEmpByChoose" resultType="Emp">
        select * from t_emp
        <where>
            <choose>
                <when test="empName != null and empName != ''">
                    emp_name = #{empName}
                </when>
                <when test="age != null and age != ''">
                    age = #{age}
                </when>
                <when test="gender != null and gender != ''">
                    gender = #{gender}
                </when>
            </choose>
        </where>
    </select>

<!--    void insertMoreEmp(@Param("emps") List<Emp> emps);-->
    <insert id="insertMoreEmp">
        insert into t_emp values
        <foreach collection="emps" item="emp" separator=",">
            (null, #{emp.empName}, #{emp.age}, #{emp.gender}, null)
        </foreach>
    </insert>

<!--    void deleteMoreEmp(@Param("empIds") Integer[] empIds);-->
<!--    第一种， 使用where in(aa,bb)-->
    <delete id="deleteMoreEmp">
        delete from t_emp where emp_id in
--         (
            <foreach collection="empIds" item="empId" separator="," open="(" close=")">
            #{empId}
            </foreach>
--         )
    </delete>

<!--    第二种，使用 where ... aa or bb -->
    <delete id="deleteMoreEmp1">
        delete from t_emp where emp_id in
        <foreach collection="empIds" item="empId" separator="or">
            #{empId}
        </foreach>
    </delete>

</mapper>